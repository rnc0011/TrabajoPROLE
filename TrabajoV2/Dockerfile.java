/* Generated By:JavaCC: Do not edit this line. Dockerfile.java */
import java.util.*;

/**
 * Trabajo. Minicompilador con JavaCC para archivos Dockerfile.
 * 
 * @author Raul Negro Carpintero
 * @author Yeray Sardón Ibáñez
 * @version 1.0
 */
public class Dockerfile implements DockerfileConstants {

        // Declaración de variables
        static String comando = "";
        static int contador = 0;
        static int contadorLineasRun = 1;
        static int maxLineasRun = 0;
        static int numeroRun = 0;
        static int contadorRun = 0;
        static int contadorCopy = 0;
        static int maxContadorCopy = 0;
        static int actualCopy = 0;
        static int numeroCopy = 0;
        static Map<String, Integer> mapaComandos = new HashMap<String, Integer>();
        static List<String> listaDestinosAdd = new ArrayList<String>();
        static List<String> listaDestinosCopy = new ArrayList<String>();

        /**
 	 * Programa principal. 
 	 * 
 	*/
        public static void main(String args[]) throws ParseException, java.io.FileNotFoundException {
                Dockerfile parser;
                if(args.length < 1) {
                        parser = new Dockerfile(System.in);
                } else {
                        parser = new Dockerfile(new java.io.FileInputStream(args[0]));
                }
                parser.comienzo();

                Iterator<String> it = mapaComandos.keySet().iterator();
                while(it.hasNext()) {
                        String aux = it.next();
                System.out.println("Comando: " + aux + " -> Veces: " + mapaComandos.get(aux));
        }

        System.out.println("");

        Iterator<String> itDestinosAdd = listaDestinosAdd.iterator();
        System.out.println("Los destinos del comando ADD son: ");
        while(itDestinosAdd.hasNext()) {
                System.out.println(itDestinosAdd.next());
        }

        System.out.println("");

        Iterator<String> itDestinosCopy = listaDestinosCopy.iterator();
        System.out.println("Los destinos del comando COPY son: ");
        while(itDestinosCopy.hasNext()) {
                System.out.println(itDestinosCopy.next());
        }

        System.out.println("");

        System.out.println("El RUN con m\u00e1s l\u00edneas es el RUN" + numeroRun + " con " + maxLineasRun + " l\u00ednea(s).");

        System.out.println("");

        System.out.println("El COPY con m\u00e1s archivos de origen es el COPY" + numeroCopy + " con " + maxContadorCopy + " archivo(s).");
    }

/**
 * Método comienzo. 
 * 
 */
  static final public void comienzo() throws ParseException {
    label_1:
    while (true) {
      comandos();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMANDO:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
  }

/**
 * Método comando. Analiza todos los comandos del dockerfile y cuenta cuantos comandos hay de cada.
 * 
 */
  static final public void comandos() throws ParseException {
                  Token tk;
         contadorLineasRun = 1; contadorCopy = 0;
    tk = jj_consume_token(COMANDO);
                        comando = tk.image;
                                        if(comando.equals("RUN")) {
                                                contadorRun++;
                                        }
                                        if(comando.equals("COPY")) {
                                                actualCopy++;
                                        }
                    if(!mapaComandos.containsKey(comando)) {
                        mapaComandos.put(comando, 1);
                    } else {
                        contador = mapaComandos.get(comando);
                        contador += 1;
                        mapaComandos.put(comando, contador);
                    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BACK:
      back(comando);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    argumento(comando);
  }

/**
 * Método argumento. Añade a las listas de destinos los destinos de los comandos ADD y COPY.
 * 
 * @param comando
 */
  static final public void argumento(String comando) throws ParseException {
                                 String destino = "";
    jj_consume_token(CADENA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BACK:
      back(comando);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CADENA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      destino = masArgumentos(comando);
    }
         if(comando.equals("ADD")) {
                listaDestinosAdd.add(destino);
        } else if(comando.equals("COPY")) {
                listaDestinosCopy.add(destino);
        }
  }

/**
 * Método masArgumentos. Utilizado para contar los archivos de origen del comando COPY.
 * 
 * @param comando
 * @return tk.image - destino de los comandos ADD o COPY
 */
  static final public String masArgumentos(String comando) throws ParseException {
                                       Token tk;
    tk = jj_consume_token(CADENA);
         if(comando.equals("COPY")) {
                contadorCopy++;
                if(contadorCopy >= maxContadorCopy) {
                        maxContadorCopy = contadorCopy;
                        numeroCopy = actualCopy;
                }
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BACK:
      back(comando);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
                          {if (true) return tk.image;}
    throw new Error("Missing return statement in function");
  }

/**
 * Método back. Utilizado para contar las líneas del comando RUN.
 * 
 * @param comando
 */
  static final public void back(String comando) throws ParseException {
    jj_consume_token(BACK);
                if(comando.equals("RUN")) {
                                contadorLineasRun++;
                                if(contadorLineasRun >= maxLineasRun) {
                                        maxLineasRun = contadorLineasRun;
                                        numeroRun = contadorRun;
                                }
                        }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public DockerfileTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0x80,0x80,0x40,0x80,};
   }

  /** Constructor with InputStream. */
  public Dockerfile(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Dockerfile(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DockerfileTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Dockerfile(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DockerfileTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Dockerfile(DockerfileTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(DockerfileTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[8];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 8; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
