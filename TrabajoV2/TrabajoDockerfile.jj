options {
    BUILD_TOKEN_MANAGER = true;
    COMMON_TOKEN_ACTION = false;
    //DEBUG_PARSER = true;
}

PARSER_BEGIN(Dockerfile)

import java.util.*;

public class Dockerfile {

	static String comando = "";
  	static int contador = 0;
  	static Map<String, Integer> mapaComandos = new HashMap<String, Integer>();
  	static List<String> listaDestinosAdd = new ArrayList<String>();
  	static List<String> listaDestinosCopy = new ArrayList<String>();

  	public static void main(String args[]) throws ParseException, java.io.FileNotFoundException {
  		Dockerfile parser;
  		if(args.length < 1) {
  			parser = new Dockerfile(System.in);
  		} else {
  			parser = new Dockerfile(new java.io.FileInputStream(args[0]));
  		}
  		parser.comienzo();

  		Iterator<String> it = mapaComandos.keySet().iterator();
  		while(it.hasNext()) {
  			String aux = it.next();
      		System.out.println("Comando: " + aux + " -> Veces: " + mapaComandos.get(aux));
      	}

      	Iterator<String> itDestinosAdd = listaDestinosAdd.iterator();
      	System.out.println("Los destinos del comando ADD son: ");
      	while(itDestinosAdd.hasNext()) {
      		System.out.println(itDestinosAdd.next());
      	}

      	Iterator<String> itDestinosCopy = listaDestinosCopy.iterator();
      	System.out.println("Los destinos del comando COPY son: ");
      	while(itDestinosCopy.hasNext()) {
      		System.out.println(itDestinosCopy.next());
      	}
    }

}

PARSER_END(Dockerfile)

SKIP: {
    " " | < EOL: ("\n") >
}

TOKEN: {
    < COMANDO: (["A" - "Z"])+ >
|	< CADENA: (["a" - "z", "A" - "Z", "0" - "9", "/", ".", "&", ":", "_", "-", "\\", "$"])+ >
}

void comienzo(): {} {
	(comandos())+
}

void comandos(): {Token tk;} {
	tk = <COMANDO> {String comando = tk.image;
                    if(!mapaComandos.containsKey(comando)) {
                    	mapaComandos.put(comando, 1);
                    } else {
                    	contador = mapaComandos.get(comando);
                    	contador += 1; 
                    	mapaComandos.put(comando, contador);
                    }} argumento(comando)
}

void argumento(String comando): {Token tk;} {
	tk = <CADENA> (masArgumentos(comando))*
}

void masArgumentos(String comando): {Token tk;} {
	tk = <CADENA> {if(comando.equals("ADD")) {
                    listaDestinosAdd.add(tk.image);
                  } else if(comando.equals("COPY")) {
                  	listaDestinosCopy.add(tk.image);
                  }}
}